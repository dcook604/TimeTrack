version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: timetracker-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN:-traefik.localhost}`)"
      - "traefik.http.routers.traefik.service=api@internal"
    networks:
      - traefik

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: timetracker-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - traefik

  # Timetracker Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: timetracker-app
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      
      # NextAuth
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # App Configuration
      NODE_ENV: ${NODE_ENV:-production}
      
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      
      # App Settings
      APP_NAME: ${APP_NAME:-TimeTracker}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./prisma:/app/prisma:ro
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma db seed &&
        node server.js
      "
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${LOCAL_DOMAIN:-localhost}`) || Host(`${LOCAL_TRAEFIK_DOMAIN:-timetracker.localhost}`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
      # Production domain with HTTPS
      - "traefik.http.routers.app-secure.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.app-secure.entrypoints=websecure"
      - "traefik.http.routers.app-secure.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.app.middlewares=redirect-to-https"
    networks:
      - traefik

volumes:
  postgres_data:
  traefik_letsencrypt:

networks:
  traefik:
    external: false 